#lang typed/racket/base

(provide main)

(require digimon/cmdopt)
(require sgml/sax)

(require typed/net/url)

(require racket/string)
(require racket/pretty)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define-cmdlet-option iana-flags #: IANA-Flags
  #:program 'iana
  #:args []

  #:once-each
  [[(#\t type)     #:=> cmdopt-string->symbol type #: Symbol         "specify the target ~1 [default: MIME]"]
   [(#\i uri url)  #:=> cmdopt-string-identity url                   "use an alternative ~1"]])

(define default-iana-use-ssl? : (Parameterof Boolean) (make-parameter #false))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define iana-mime-current-category : (Parameterof (Option Symbol)) (make-parameter #false))
(define iana-mime-current-name : (Parameterof (Option Symbol)) (make-parameter #false))
(define media-types : (HashTable Symbol (HashTable Symbol Symbol)) (make-hasheq))

(define iana-mime-display-element : (XML-Element-Handler Void)
  (lambda [name depth attrs empty? preserver? seed]
    (when (eq? name 'registry)
      (if (list? attrs)
          (let ([?id (assq 'id attrs)])
            (when (pair? ?id)
              (iana-mime-current-category
               (string->symbol (assert (cdr ?id) string?)))))
          (iana-mime-current-category #false)))))

(define ianan-display-pcdata : (XML-PCData-Handler Void)
  (lambda [element depth pcdata preserver? cdata? datum]
    (define category (iana-mime-current-category))
    (define name (iana-mime-current-name))
    
    (unless (not category)
      (case element
        [(name)
         (iana-mime-current-name
          (if (string-contains? pcdata " ")
              #false (string->symbol pcdata)))]
        [(file)
         (unless (not name)
           (hash-set! (hash-ref! media-types category (inst make-hasheq Symbol Symbol))
                      name (string->symbol pcdata))
           (iana-mime-current-name #false))]))))

(define iana-mime-agent
  ((inst make-xml-event-handler Void)
   #:element iana-mime-display-element
   #:pcdata ianan-display-pcdata))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define iana-dump : (-> Symbol (Option String) Void)
  (lambda [type ?uri]
    (define-values (uri)
      (case type
        [(MIME media) "https://www.iana.org/assignments/media-types/media-types.xml"]
        [else (raise-user-error 'iana "unrecognized type")]))

    (define /dev/xmlin (get-pure-port (string->url uri)))
    
    (load-xml-datum /dev/xmlin iana-mime-agent)

    (printf "#lang typed/racket/base~n~n")
    (printf "(provide (all-defined-out))~n~n")
    (printf ";;; this file is auto-generated by digimon/digivice/iana~n~n")
    
    (pretty-write `(define media-types : (HashTable Symbol (HashTable Symbol Symbol)) ,media-types))))

(define main : (-> (U (Listof String) (Vectorof String)) Void)
  (lambda [argument-list]
    (define-values (options Î»argv) (parse-iana-flags argument-list))
    
    (cond [(iana-flags-help? options) (display-iana-flags)]
          [else (iana-dump (or (iana-flags-type options) 'MIME)
                           (iana-flags-uri options))])))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(main (current-command-line-arguments))
